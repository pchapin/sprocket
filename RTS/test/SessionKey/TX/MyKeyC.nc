// FILE   : MyKeyC.nc
// SUMMARY: Component that stores test keys.
//

module MyKeyC {
    provides interface MyKey;
}
implementation {
    
    // NOTE: Hardcoded for now. Should be generated by Sprocket.

    // Key #1 (Alice)
    // Public.x = 15113bce1ea269c02e30842169a9217c9acd24f5
    // Public.y = c0c22799951ccc68a677ad1ad5cb48c93942b008
    // Private  = b6e567fcd8717f45263275eb06c1bc7f73e6c117
    //
    // Key #2 (Bob)
    // Public.x = 79e7c485d9dd5ce2beaf8d2b6389adca6c81ae7e
    // Public.y = 438b0f659e6fee02d1c59c0d489275552062cfbb
    // Private  = cff055becdf72b184855b11cc15a3f715a2ea9bf

    // Key information stored in little endian form in 16 bit units.
    
    const Point myPublicKey = {
        { 0x24F5, 0x9ACD, 0x217C, 0x69A9, 0x8421, 0x2E30, 0x69C0, 0x1EA2, 0x3BCE, 0x1511, 0 },
        { 0xB008, 0x3942, 0x48C9, 0xD5CB, 0xAD1A, 0xA677, 0xCC68, 0x951C, 0x2799, 0xC0C2, 0 }
    };

    // const Point myPublicKey = {
    //     { 0xAE7E, 0x6C81, 0xADCA, 0x6389, 0x8D2B, 0xBEAF, 0x5CE2, 0xD9DD, 0xC485, 0x79E7, 0 },
    //     { 0xAE7E, 0x6C81, 0xADCA, 0x6389, 0x8D2B, 0xBEAF, 0x5CE2, 0xD9DD, 0xC485, 0x79E7, 0 }
    // };
	
    const NN_DIGIT myPrivateKey[] =
        { 0xC117, 0x73E6, 0xBC7F, 0x06C1, 0x75EB, 0x2632, 0x7F45, 0xD871, 0x67FC, 0xB6E5, 0 };
   
    // const NN_DIGIT myPrivateKey[] =
    //     { 0xA9BF, 0x5A2E, 0x3F71, 0xC15A, 0xB11C, 0x4855, 0x2B18, 0xCDF7, 0x55BE, 0xCFF0, 0 };

	
    // TODO fix, so you can look up keys based on MOTE ID.struct IDs {
    // uint16_t node_id;
    // uint8_t  component_id;
    // uint8_t  interface_id;


    command const Point *MyKey.get_public_key( )
    {
        return &myPublicKey;
    }
  
    
    command const NN_DIGIT *MyKey.get_private_key( )
    {
        return myPrivateKey;
    }
    
}
