#include "build/telosb/StorageVolumes.h"
#include "./KappaMsg.h"
configuration BrainboxAppC  {
}
implementation {
    components PrintfC , SerialStartC ;
    components SensorBoxC  as App , MainC ;
    App .Boot  -> MainC ;
    components new ConfigStorageC ( 0  );
    App .ConfigStorage  -> ConfigStorageC .ConfigStorage ;
    App .Mount  -> ConfigStorageC .Mount ;
    components new LogStorageC ( 1 , TRUE  );
    App .LogRead  -> LogStorageC ;
    App .LogWrite  -> LogStorageC ;
    components ActiveMessageC ;
    App .RadioControl  -> ActiveMessageC ;
    components CollectionC ;
    App .CollectionControl  -> CollectionC ;
    App .CtpInfo  -> CollectionC ;
    components new CollectionSenderC ( KAPPA_MSG_ID  );
    App .DataSend  -> CollectionSenderC ;
    App .DataPacket  -> CollectionSenderC ;
    components DisseminationC ;
    App .DisseminationControl  -> DisseminationC .StdControl ;
    components new DisseminatorC ( command_t  , 777  ) as SyncChan ;
    App .Command  -> SyncChan .DisseminationValue ;
    components SpDisseminatorC  as BcastChan , RPCControlC ;
    App .Bcast  -> BcastChan .SpDisseminationValue ;
    components ACRT0C , Spkt_1 , Spkt_InitializeC , new AMSenderC ( 8  );
    Spkt_1 .AuthorizationClient  -> ACRT0C .AuthorizationClient ;
    BcastChan .NeighborUpdate  -> Spkt_1 .SpDisseminationUpdate ;
    Spkt_1 .ComponentManager  -> BcastChan .ComponentManager ;
    Spkt_1 .Packet  -> AMSenderC .Packet ;
    Spkt_1 .AMSend  -> AMSenderC .AMSend ;
    RPCControlC .StubControl  -> Spkt_1 .RPCControl ;
    App .SpartanBoot  -> RPCControlC ;
    App .RPCControl  -> RPCControlC ;
    components LedsC ;
    App .Leds  -> LedsC ;
    components AdcChannel0C , new AdcReadClientC (  ) as A0_Client ;
    A0_Client .AdcConfigure  -> AdcChannel0C ;
    AdcChannel0C .Read  -> A0_Client ;
    components AdcChannel1C , new AdcReadClientC (  ) as A1_Client ;
    A1_Client .AdcConfigure  -> AdcChannel1C ;
    AdcChannel1C .Read  -> A1_Client ;
    App .Sonar  -> AdcChannel1C .ReadMe ;
    App .Voltage  -> AdcChannel0C .ReadMe ;
    components new SensirionSht11C (  );
    App .Temp  -> SensirionSht11C .Temperature ;
    components new UVMS1087ParC (  ) as LightClient ;
    App .Par  -> LightClient .Read ;
    components new HamamatsuS1087ParC (  );
    App .SoilM1  -> HamamatsuS1087ParC ;
    App .SoilM2  -> HamamatsuS1087ParC ;
    components HplMsp430GeneralIOC  as Gio ;
    App .Gio  -> Gio .Port63 ;
    components new TimerMilliC (  );
    App .Timer  -> TimerMilliC ;
    components new TimerMilliC (  ) as BPIC ;
    App .BPITimer  -> BPIC ;
    components new TimerMilliC (  ) as Stopwatch ;
    App .Stopwatch  -> Stopwatch ;
    components UserButtonC ;
    App .ButtonEvent  -> UserButtonC .Notify ;

    // This stuff has to be generated by Sprocket.
    components new AMReceiverC(8);
    components Spkt_2;
    components ASRT0C;
    Spkt_2.SpDisseminationUpdate -> BcastChan.SpDisseminationUpdate;
    Spkt_2.Receive -> AMReceiverC;
    Spkt_2.AMPacket -> AMReceiverC;
    Spkt_2.AuthorizationServer -> ASRT0C;

}

