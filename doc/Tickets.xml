<?xml version="1.0" encoding="UTF-8"?>
<tickets type="array">
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">0</component-id>
  <created-on type="datetime">2011-12-26T14:42:00-05:00</created-on>
  <description>The handling of typedef in the parser is not correct. There are at least two problems (perhaps two tickets should be created). See the files Module0120.nc and Module0230.nc in the nesC parser positive syntax test cases. The comments in those files discuss the problems.</description>
  <from-support type="integer">1</from-support>
  <id type="integer">11982363</id>
  <importance type="integer">1</importance>
  <importance-float type="float">1.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">1</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>arncbOlzur4B4KacwqjQYw</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>There are errors in the handling of typedef</summary>
  <updated-at type="datetime">2011-12-26T14:42:00-05:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">0</component-id>
  <created-on type="datetime">2011-12-26T14:44:07-05:00</created-on>
  <description>To be faithful to the specification of nesC, the parser should process interface and component definitions as they are encountered. This means that interfaces should be processed when they are seen in uses/provides declarations and components should be processed when as they are mentioned in configuration definitions. The parser should start with the application's top level configuration and recursively descend the program's high level structure, locating and processing source files on demand. This is in contrast to what it currently does which is to simply process each source file independently in an arbitrary order. The structured approach is necessary so that any global types and macros defined by the interface or component can be registered in the parser's symbol table before it processes the rest of the &quot;calling&quot; component. Otherwise programmers will need to create and manually include header files they should not be required to use. One implication of this is that parser should interleave preprocessing with parsing, in some cases saving some preprocessor state from one file to the next. The following example illustrates a program that is acceptable to the nesC compiler but that requires the kind of processing I'm talking about here. It consists of several files that depend on each other.

&lt;pre&gt;&lt;code&gt;
---&gt; I.nc &lt;---
typedef int counter_t;
#define MAX_COUNT 128

interface I {
  command void setCounter(counter_t value);
}

---&gt; AppC.nc &lt;---
configuration AppC { }
implementation {
  components AC, BC;

  AC.I -&gt; BC;
}

---&gt; AC.nc &lt;---
typedef int acounter_t;

module AC {
  uses interface I;
}
implementation {
  void f( )
  {
    // The following line is not an error. The type counter_t is known from interface I.
    counter_t currentCount = 0;
    call I.setCounter(currentCount);
  }
}

---&gt; BC.nc &lt;---
module BC {
  provides interface I;
}
implementation {
  // The following line is not an error. The type counter_t is known from interface I.
  command void I.setCounter(counter_t value)
  {
    // The following line is not an error. The type acounter_t is known from module AC.
    // Note that module AC was processed before this module when AppC was processed.
    acounter_t count;

    // The following line is not an error. The macro MAX_COUNT is known from interface I.
    if( value &lt; MAX_COUNT ) {
      // etc...
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

In the example above, the parser should process AppC.nc first and then process AC.nc and BC.nc only when the need to do so is discovered (due to the components line in AppC.nc). Furthermore global types introduced in I.nc need to be made known to AC.nc and BC.nc simply by virtue of those files mentioning interface I in their uses/provides specifications. Note that preprocessor macros are handled in a similar way. Note also that global types defined in AC.nc are visible in BC.nc because AC.nc is processed before BC.nc is read.</description>
  <from-support type="integer">1</from-support>
  <id type="integer">11982403</id>
  <importance type="integer">2</importance>
  <importance-float type="float">2.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">2</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>arncbOlzur4B4KacwqjQYw</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Preprocessing and parsing need to be directed by program structure</summary>
  <updated-at type="datetime">2011-12-26T14:44:07-05:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">0</component-id>
  <created-on type="datetime">2011-12-26T14:45:58-05:00</created-on>
  <description>If the last line of the file is a single line comment such as

&lt;pre&gt;&lt;code&gt;
// This is the last line.
&lt;/code&gt;&lt;/pre&gt;

and if, furthermore, that line is not terminated with a normal line ending, the parser (really the lexer) produces a message about a 'mismatched character &lt;EOF&gt;'. Currently EOF is not considered a valid way to end single line comments.  The workaround is to be sure the last line in the file is terminated with a proper line ending.</description>
  <from-support type="integer">1</from-support>
  <id type="integer">11982473</id>
  <importance type="integer">3</importance>
  <importance-float type="float">3.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">3</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>arncbOlzur4B4KacwqjQYw</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>nesC parser can't handle EOF-terminated single line comments</summary>
  <updated-at type="datetime">2011-12-26T14:45:58-05:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id>cFwOhwY0er251ZaaeP0Qfc</assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">1</component-id>
  <created-on type="datetime">2012-09-06T13:38:03-04:00</created-on>
  <description>The implementation of the session key negotiation protocol is currently incomplete. It should be completed.</description>
  <from-support type="integer">1</from-support>
  <id type="integer">31471553</id>
  <importance type="integer">18</importance>
  <importance-float type="float">18.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer">1807533</milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">25</number>
  <priority type="integer">1</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>arncbOlzur4B4KacwqjQYw</space-id>
  <status type='integer'>1</status>
  <status-name>Accepted</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Finish session key negotiation protocol</summary>
  <updated-at type="datetime">2012-09-28T09:55:51-04:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">Medium</estimate>
  <total-estimate type="float">3.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">1</component-id>
  <created-on type="datetime">2011-12-26T14:47:49-05:00</created-on>
  <description>The system should avoid creating messages that are too large. Right now with the SimpleMAC system messages (header + arguments) are limited to 16 bytes. Sprocket should verify that the size of the arguments is &quot;reasonable&quot; and then the run time system should check that the actual size required (which depends on the number of destination components) is in range. If the overall message size is too large, the run time system should truncate the list of destination components. We don't promise to post duties on remote nodes anyway so dropping a few from the list would be acceptable.</description>
  <from-support type="integer">1</from-support>
  <id type="integer">11982523</id>
  <importance type="integer">4</importance>
  <importance-float type="float">4.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">4</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>arncbOlzur4B4KacwqjQYw</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Add check on message size</summary>
  <updated-at type="datetime">2011-12-26T14:47:49-05:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">1</component-id>
  <created-on type="datetime">2011-12-26T14:49:24-05:00</created-on>
  <description>After upgrading to TinyOS v2.1.1 the old method I was using to activate low power listening no longer worked. My first attempt at fixing it was not 100% right either (the receiving node missed about 50% of the packets). To make testing easier I removed low power listening support for now. It should be added back (correctly!) at some point.</description>
  <from-support type="integer">1</from-support>
  <id type="integer">11982543</id>
  <importance type="integer">6</importance>
  <importance-float type="float">6.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">6</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>arncbOlzur4B4KacwqjQYw</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Add support for low power listening</summary>
  <updated-at type="datetime">2011-12-26T14:49:24-05:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">1</component-id>
  <created-on type="datetime">2011-12-26T14:54:36-05:00</created-on>
  <description>In the Sprocket run time system, the CertificateSender component uses a randomized broadcast interval to prevent adjacent nodes from colliding with each other indefinitely. However, the seed for the random number generation is not derived from a random source. Thus if two adjacent nodes boot at the same moment, their certificate broadcasts will collide indefinitely anyway.</description>
  <from-support type="integer">1</from-support>
  <id type="integer">11982663</id>
  <importance type="integer">13</importance>
  <importance-float type="float">13.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">13</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>arncbOlzur4B4KacwqjQYw</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>CertificateSender component uses the same random sequence for broadcast intervals</summary>
  <updated-at type="datetime">2011-12-26T14:54:36-05:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">1</component-id>
  <created-on type="datetime">2011-12-26T14:55:59-05:00</created-on>
  <description>The Sprocket runtime system should probably use compressed ECC public keys. Doing so would reduce the size of certificates (saving radio transmission energy) and save memory in the public key storage area. The cost is in the computation required to expand the keys before use (this cost should be evaluated before committing to the use of compressed keys).

This change will require adjustments to RTAdmin as well as the Sprocket runtime system.</description>
  <from-support type="integer">1</from-support>
  <id type="integer">11982693</id>
  <importance type="integer">15</importance>
  <importance-float type="float">15.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">15</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>arncbOlzur4B4KacwqjQYw</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Implement ECC public key compression</summary>
  <updated-at type="datetime">2011-12-26T14:55:59-05:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">1</component-id>
  <created-on type="datetime">2011-12-26T14:56:44-05:00</created-on>
  <description>Sprocket's handling of dynamic wires does not handle multiple endpoints. Right now a MAC is generated for only the first endpoint in the component set. ACRT0C should be updated to create multiple MACs as needed. ASRT0C should be updated to search the appended MACs to see if any one of them matches the expected MAC.</description>
  <from-support type="integer">1</from-support>
  <id type="integer">11982703</id>
  <importance type="integer">16</importance>
  <importance-float type="float">16.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">16</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>arncbOlzur4B4KacwqjQYw</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Dynamic wires do not handle multiple endpoints</summary>
  <updated-at type="datetime">2011-12-26T14:56:44-05:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">1</component-id>
  <created-on type="datetime">2011-12-28T15:09:34-05:00</created-on>
  <description>Suppose node A has a bad certificate that it broadcasts periodically. Suppose a neighboring node B receives the certificate without error so the checksum is correct. Node B will attempt to verify the signature on the certificate but that verification will fail if the certificate is bad. Thus Node B discards the certificate. The problem is that because node A is broadcasting the certificate periodically node B will attempt to verify it repeatedly. This causes node B to do excessive and unnecessary computation.

To deal with this the runtime system could keep a record of the the bad certificate (checksum only). Obviously the bad certificate should not be used in the construction of the local RT model. However, if it is received again it can be discarded at once. Right now the credential storage area stores checksums of the valid certificates so that a retransmission of a valid certificate can be ignored. That facility should be extended so that checksums of even invalid certificates are also stored.</description>
  <from-support type="integer">1</from-support>
  <id type="integer">12056333</id>
  <importance type="integer">19</importance>
  <importance-float type="float">19.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">19</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>arncbOlzur4B4KacwqjQYw</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Periodically received bad certificate causes repeated verification failures</summary>
  <updated-at type="datetime">2011-12-28T15:09:34-05:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">1</component-id>
  <created-on type="datetime">2012-01-22T10:38:25-05:00</created-on>
  <description>Right now the minimum model is computed using only credentials received from other nodes. However, in order for the node policy to be considered, the minimum model must also taken into account credentials deployed with the node. In the tests I've done so far a node received its policy from a neighboring node running the same program (and deployed with the same credentials). It obviously should not be necessary for a node to receive its policy over the air from an identical neighbor!</description>
  <from-support type="integer">1</from-support>
  <id type="integer">13288213</id>
  <importance type="integer">20</importance>
  <importance-float type="float">20.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">20</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>arncbOlzur4B4KacwqjQYw</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Minimum model should include both deployed and received credentials</summary>
  <updated-at type="datetime">2012-01-22T10:38:25-05:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">1</component-id>
  <created-on type="datetime">2012-01-22T11:27:44-05:00</created-on>
  <description>Because of the way the runtime system is designed the server can use the same session key with multiple clients from the same domain. Thus it can skip the Diffie-Hellman negotiation step when creating a session key for the second client. Instead the server can just &quot;steal&quot; the existing session key that was created for the first client. This optimization should be beneficial in the common case when a server is talking to multiple client nodes in the same domain.</description>
  <from-support type="integer">1</from-support>
  <id type="integer">13288883</id>
  <importance type="integer">21</importance>
  <importance-float type="float">21.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">21</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>arncbOlzur4B4KacwqjQYw</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Implement session key stealing</summary>
  <updated-at type="datetime">2012-01-22T11:27:44-05:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">1</component-id>
  <created-on type="datetime">2012-02-13T14:07:43-05:00</created-on>
  <description>Suppose a client can post duties as either entity A or entity B. Suppose also that the client tries to invoke a service over a dynamic wire &quot;as A.&quot; If that invocation succeeds a session key is created between the client and server nodes. Now suppose the client later tries to invoke the same service over a dynamic wire &quot;as B.&quot; The session key created previously will be used _even if the B entity has no access to the service_. This is not a security problem from the server's point of view because the client node holds private keys for both A and B (thus the client node is a member of the &quot;A&quot; domain). However, it does mean a client that is purposely selecting, for example, a potentially weaker entity for a particular invocation might find that invocation succeeding when it should have failed.</description>
  <from-support type="integer">1</from-support>
  <id type="integer">14867333</id>
  <importance type="integer">22</importance>
  <importance-float type="float">22.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">22</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>arncbOlzur4B4KacwqjQYw</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Authorization error for multi-entity clients</summary>
  <updated-at type="datetime">2012-02-13T14:07:43-05:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">2</component-id>
  <created-on type="datetime">2011-12-26T14:48:51-05:00</created-on>
  <description>Currently only one duty is allowed in an interface. This is a significant limitation and it should be removed.</description>
  <from-support type="integer">1</from-support>
  <id type="integer">11982533</id>
  <importance type="integer">5</importance>
  <importance-float type="float">5.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">5</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>arncbOlzur4B4KacwqjQYw</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Add support for multiple duties in an interface</summary>
  <updated-at type="datetime">2011-12-26T14:48:51-05:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">2</component-id>
  <created-on type="datetime">2011-12-26T14:50:03-05:00</created-on>
  <description>When generating stubs if there is more than one dynamic wire in a configuration Sprocket will duplicate certain &quot;boiler plate&quot; component declarations. This causes the nesC compilation to fail. Sprocket should review the entire configuration and make a master list of all additional components required, removing duplicates, before it starts to rewrite the configuration.</description>
  <from-support type="integer">1</from-support>
  <id type="integer">11982553</id>
  <importance type="integer">7</importance>
  <importance-float type="float">7.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">7</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>arncbOlzur4B4KacwqjQYw</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>When generating stubs multiple dynamic wires cause duplicate component declarations</summary>
  <updated-at type="datetime">2011-12-26T14:50:03-05:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">2</component-id>
  <created-on type="datetime">2011-12-26T14:50:35-05:00</created-on>
  <description>Currently Sprocket does not install or check the duty ID in the message header as it is documented to do so. This means that system currently only works for interfaces that contain a single duty.</description>
  <from-support type="integer">1</from-support>
  <id type="integer">11982593</id>
  <importance type="integer">8</importance>
  <importance-float type="float">8.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">8</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>arncbOlzur4B4KacwqjQYw</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Generated stubs and skeletons do not install duty ID in message header</summary>
  <updated-at type="datetime">2011-12-26T14:50:35-05:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">2</component-id>
  <created-on type="datetime">2011-12-26T14:51:06-05:00</created-on>
  <description>Currently when Sprocket generates a skeleton for a remotely provided interface it does not modify the top level configuration of the application to include the necessary skeleton components and related wirings. This is partly because Sprocket does not know which configuration file to rewrite (the top level configuration is not known to Sprocket).</description>
  <from-support type="integer">1</from-support>
  <id type="integer">11982603</id>
  <importance type="integer">9</importance>
  <importance-float type="float">9.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">9</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>arncbOlzur4B4KacwqjQYw</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Skeleton wiring not added to top level configuration</summary>
  <updated-at type="datetime">2012-02-13T14:54:44-05:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">2</component-id>
  <created-on type="datetime">2011-12-26T14:51:37-05:00</created-on>
  <description>Currently Sprocket requires that the top level configuration be contained in a file named AppC.nc. This is because the Makefile writer in Main.scala assumes this name. This restriction should be removed. Doing this will require telling Sprocket which file contains the top level configuration, perhaps using a command line argument. This will be necessary anyway if Sprocket is changed to process the program in structured order.</description>
  <from-support type="integer">1</from-support>
  <id type="integer">11982613</id>
  <importance type="integer">10</importance>
  <importance-float type="float">10.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">10</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>arncbOlzur4B4KacwqjQYw</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Sprocket requires specific name for top level configuration</summary>
  <updated-at type="datetime">2011-12-26T14:51:37-05:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">2</component-id>
  <created-on type="datetime">2011-12-26T14:52:07-05:00</created-on>
  <description>Currently Sprocket assumes the entire program (that needs to be processed by Sprocket anyway) exists in a single folder. This is awkward, however, for the kind of applications Sprocket is intended to support. The problem is that client and server programs must share some information, in particular: remote interface definitions. It would be convenient to have those definitions in a common space. This implies that each program must be spread over at least two folders. Sprocket should support this. Sprocket does allow (even expect) certain auxiliary data such as component ID maps, interface ID maps, and key maps to be in a shared area. It should allow source code to be similarly shared, ideally in a consistent way.</description>
  <from-support type="integer">1</from-support>
  <id type="integer">11982623</id>
  <importance type="integer">11</importance>
  <importance-float type="float">11.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">11</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>arncbOlzur4B4KacwqjQYw</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Sprocket should accept programs spread over multiple folders</summary>
  <updated-at type="datetime">2011-12-26T14:52:07-05:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">2</component-id>
  <created-on type="datetime">2011-12-26T14:53:50-05:00</created-on>
  <description>Normally nesC allows the target endpoint of a wire to default to the same interface as was used on the source endpoint. For example:

&lt;pre&gt;&lt;code&gt;
configuration AppC { }
implementation {
  components A, B;

  A.I -&gt; B;  // Same as A.I -&gt; B.I;
}
&lt;/code&gt;&lt;/pre&gt;

However, when a dynamic wire is used Sprocket does not allow this abbreviation. For example:

&lt;pre&gt;&lt;code&gt;
configuration AppC { }
implementation {
  components A, RemoteSelectorC;

  A.I -&gt; [RemoteSelectorC]; // Must use A.I -&gt; [RemoteSelectorC].I;
}
&lt;/code&gt;&lt;/pre&gt;

The user would reasonably expect the abbreviated form to connect A to the I interface on all components selected by the remote selector. Currently Sprocket reports this as a rewriting error.</description>
  <from-support type="integer">1</from-support>
  <id type="integer">11982643</id>
  <importance type="integer">12</importance>
  <importance-float type="float">12.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">12</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>arncbOlzur4B4KacwqjQYw</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Dynamic wires require interface name on target endpoint</summary>
  <updated-at type="datetime">2011-12-26T14:53:50-05:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">3</component-id>
  <created-on type="datetime">2011-12-26T14:55:16-05:00</created-on>
  <description>The RTAdmin tool believes it controls the private key of every entity it knows about. It also assumes that it can sign every credential it has (meaning that every credential is issued by an entity for which it has the private key). In general these things are false. The tool should be able to import public keys for &quot;external&quot; entities and foreign certificates signed by such entities. The tool should allow its user to create credentials using external entities and to dump foreign certificates into a node's run time system.

Probably some sort of key/certificate transfer format needs to be defined. Imagine the case where an RTAdmin user downloads RT certificates from another security domain's web site.</description>
  <from-support type="integer">1</from-support>
  <id type="integer">11982683</id>
  <importance type="integer">14</importance>
  <importance-float type="float">14.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">14</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>arncbOlzur4B4KacwqjQYw</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>RTAdmin should allow the import of public keys and foreign certificates</summary>
  <updated-at type="datetime">2011-12-26T14:55:16-05:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id>cFwOhwY0er251ZaaeP0Qfc</assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">4</component-id>
  <created-on type="datetime">2011-12-26T14:57:34-05:00</created-on>
  <description>The directed diffusion sample should be completed in the sense that it should be possible to demonstrate it running on a collection of several motes. For purposes of demonstration it is probably acceptable for the data generated by the network to be entirely synthesized. That is, one node in the network could be hard coded to express an interest in certain data and another node in the network could be hard coded to produce such data. Use the mote LEDs to track their state. It may also be possible or desirable to run the sample in the TinyOS simulator.</description>
  <from-support type="integer">1</from-support>
  <id type="integer">11982733</id>
  <importance type="integer">17</importance>
  <importance-float type="float">17.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer">1807533</milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">17</number>
  <priority type="integer">2</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>arncbOlzur4B4KacwqjQYw</space-id>
  <status type='integer'>1</status>
  <status-name>Accepted</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Complete the directed diffusion sample</summary>
  <updated-at type="datetime">2012-09-28T09:55:30-04:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">Small</estimate>
  <total-estimate type="float">1.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id>cFwOhwY0er251ZaaeP0Qfc</assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">4</component-id>
  <created-on type="datetime">2011-12-26T14:58:00-05:00</created-on>
  <description>I think a time synchronization protocol would be a nice demonstration of SpartanRPC. It might even be useful (necessary?) in the RT enabled version of the system. When real certificates are used, it is desirable to check their expiration times as part of certificate validation. This means the network will need a reasonably accurate notion of time (although tight synchronization would not be necessary).</description>
  <from-support type="integer">1</from-support>
  <id type="integer">11982743</id>
  <importance type="integer">16</importance>
  <importance-float type="float">16.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer">1807533</milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">18</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>arncbOlzur4B4KacwqjQYw</space-id>
  <status type='integer'>1</status>
  <status-name>Accepted</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Create a time synchronization sample</summary>
  <updated-at type="datetime">2012-09-28T13:01:11-04:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">Medium</estimate>
  <total-estimate type="float">3.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id>cFwOhwY0er251ZaaeP0Qfc</assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">4</component-id>
  <created-on type="datetime">2012-09-28T13:02:54-04:00</created-on>
  <description>TOSSIM will be needed to simulate a largish network for experimenting with some of the sample programs. I haven't used TOSSIM before so I have to figure that out.</description>
  <from-support type="integer">1</from-support>
  <id type="integer">33481863</id>
  <importance type="integer">19</importance>
  <importance-float type="float">19.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer">1807533</milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">26</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>arncbOlzur4B4KacwqjQYw</space-id>
  <status type='integer'>1</status>
  <status-name>Accepted</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Figure out TOSSIM</summary>
  <updated-at type="datetime">2012-09-28T13:03:20-04:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">Medium</estimate>
  <total-estimate type="float">3.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">5</component-id>
  <created-on type="datetime">2012-09-06T13:34:18-04:00</created-on>
  <description>It would be desirable to test the samples in an automatic or semi-automatic way. This will likely require the use of some kind of simulator since automatically downloading to hardware and verify proper operation on that hardware would be very difficult.</description>
  <from-support type="integer">1</from-support>
  <id type="integer">31471333</id>
  <importance type="integer">24</importance>
  <importance-float type="float">24.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">24</number>
  <priority type="integer">4</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>arncbOlzur4B4KacwqjQYw</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Create system to automatically test samples</summary>
  <updated-at type="datetime">2012-09-06T13:34:18-04:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">Large</estimate>
  <total-estimate type="float">7.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
</tickets>
